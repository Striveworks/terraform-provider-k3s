package handlers

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"striveworks.us/terraform-provider-k3s/internal/k3s"
	"striveworks.us/terraform-provider-k3s/internal/ssh_client"
)

type OidcConfig struct {
	Audience     types.String `tfsdk:"audience"`
	SigningPKCS8 types.String `tfsdk:"pkcs8"`
	SigningKey   types.String `tfsdk:"signing_key"`
	Issuer       types.String `tfsdk:"issuer"`
	JWKSKeys     types.String `tfsdk:"jwks_keys"`
}

func (m OidcConfig) Schema() schema.Attribute {
	return schema.SingleNestedAttribute{
		Optional:    true,
		Description: "Support for including oidc provider in k3s",
		Attributes: map[string]schema.Attribute{
			"audience": schema.StringAttribute{
				Required:            true,
				Sensitive:           true,
				MarkdownDescription: "OIDC Audience",
			},
			"pkcs8": schema.StringAttribute{
				Required:            true,
				Sensitive:           true,
				MarkdownDescription: "Public signing key",
			},
			"signing_key": schema.StringAttribute{
				Required:            true,
				Sensitive:           true,
				MarkdownDescription: "Private signing key",
			},
			"issuer": schema.StringAttribute{
				Required:            true,
				Sensitive:           true,
				MarkdownDescription: "Issuer url",
			},
			"jwks_keys": schema.StringAttribute{
				Computed:            true,
				Sensitive:           true,
				MarkdownDescription: "JSON web key set generated by the cluster following API server configuration",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},
	}
}

func (n OidcConfig) Validate() error {
	return nil
}

func (m *OidcConfig) ToObject(ctx context.Context) basetypes.ObjectValue {
	return ToObject(ctx, m)
}

func NewOidcConfig(ctx context.Context, t basetypes.ObjectValue) OidcConfig {
	var na OidcConfig
	t.As(ctx, &na, basetypes.ObjectAsOptions{})
	return na
}

func (m OidcConfig) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"audience":    types.StringType,
		"pkcs8":       types.StringType,
		"signing_key": types.StringType,
		"issuer":      types.StringType,
		"jwks_keys":   types.StringType,
	}
}

func (m OidcConfig) configureServer(server k3s.ServerOidc) {
	server.AddOidc(
		m.Audience.ValueString(),
		m.Issuer.ValueString(),
		m.SigningPKCS8.ValueString(),
		m.SigningKey.ValueString(),
	)
}

func (m *OidcConfig) setJwks(client ssh_client.SSHRun) error {
	res, err := client.Run("sudo k3s kubectl get --raw /openid/v1/jwks")
	if err != nil {
		return fmt.Errorf("fetching status jwks key: %s", err.Error())
	}

	m.JWKSKeys = types.StringValue(res[0])
	return nil
}
