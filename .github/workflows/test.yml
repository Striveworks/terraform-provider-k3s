# Terraform Provider testing workflow.
name: Tests

# This GitHub action runs your tests for each pull request and push.
# Optionally, you can turn it on using a schedule for regular testing.
on:
  pull_request:
    paths-ignore:
      - "README.md"

# Testing only needs permissions to read the repository contents.
permissions:
  contents: read

jobs:
  # Ensure project builds before running testing matrix
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true
      - run: go mod download
      - run: go build -v .
      - name: Run linters
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest

  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true
      # We need the latest version of Terraform for our documentation generation to use
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - name: git diff
        run: |
          git diff --compact-summary --exit-code || \
            (echo; echo "Unexpected difference in directories after code generation. Run 'make generate' command and commit."; exit 1)

  # Run acceptance tests in a matrix with Terraform CLI versions
  # test:
  #   name: Terraform Provider Acceptance Tests
  #   needs: build
  #   runs-on: openstack
  #   timeout-minutes: 15
  #   env:
  #     TF_ACC: "1"
  #     OS_REGION_NAME: "${{ secrets.OS_REGION_NAME }}"
  #     OS_INTERFACE: "${{ secrets.OS_INTERFACE }}"
  #     OS_AUTH_TYPE: v3applicationcredential
  #     OS_AUTH_URL: "${{ secrets.OS_AUTH_URL }}"
  #     OS_APPLICATION_CREDENTIAL_SECRET: "${{ secrets.OS_APPLICATION_CREDENTIAL_SECRET }}"
  #     OS_APPLICATION_CREDENTIAL_ID: "${{ secrets.OS_APPLICATION_CREDENTIAL_ID }}"
  #     OS_IDENTITY_API_VERSION: "3"
  #     OS_TENANT_NAME: "${{ secrets.OS_TENANT_NAME }}"
  #     TF_VAR_flavor: "c2-m8-g0"
  #     TF_VAR_availability_zone: nova
  #     TF_VAR_name: "${{ matrix.test-case.name }}"
  #     TF_VAR_user: "${{ matrix.test-case.user }}"
  #     TF_VAR_image_id: "${{ matrix.test-case.image_id }}"
  #     TF_VAR_network_id: "${{ secrets.NETWORK_ID }}"
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       test-case:
  #         - name: single
  #           user: ubuntu
  #           # Ubuntu 24.04
  #           image_id: 0429c74d-e5bb-430f-b854-8d5fa98af8dd
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-go@v5
  #       with:
  #         go-version-file: "go.mod"
  #         cache: true
  #     - uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.9.*
  #     - run: go mod download
  #     - run: make cfg-tfrc
  #     - run: make install
  #     - name: Stand up test infra
  #       run: |
  #         terraform -chdir=tests init
  #         terraform -chdir=tests apply -auto-approve
  #         terraform -chdir=tests output -json \
  #           | jq 'to_entries | map({(.key): .value.value})|add' > acc_test_inputs.json
  #         echo "TEST_JSON_PATH=$(pwd)/acc_test_inputs.json" >> "$GITHUB_ENV"
  #     - name: Run tests
  #       env:
  #         TF_LOG_PROVIDER: trace
  #       run: |
  #         go test -v -cover -timeout 360m ./...
  #       timeout-minutes: 10
  #     - if: always()
  #       name: Teardown resources
  #       run: terraform -chdir=tests destroy -auto-approve
